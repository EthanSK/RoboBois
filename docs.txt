Raspberry pi password: robobois


To connect remotely to the RPi:
    1. copy the file over to doc machine using: scp scripts/ssh-pi <college username>@shell4.doc.ic.ac.uk:/tmp/  
    2. connect to the doc computer:  scripts/remote_connect.sh
    3. on it, move the file from /tmp to the home folder by doing: mv /tmp/ssh-pi .
    4. now you can run ./ssh-pi after connecting to the doc computer without having to know the ever changing ip of the pi

Web interface:
http://ip:9000

web interface code: 
cd /opt/brickpiexplorer


plan for the challenge:

- we know our location, and we know the map

- create an occupancy grid of particles, each particle having a flag stating if it is part of the wall or not (to ensure we don't change the weights of particles that are walls)



- go to the center of each area A B and C, spin the sonar, and update the occupancy grid (we update it by adding sonar angle and depth measurement to the robot rotation and position)
- remember we have to stop every few cm and spin sonar along the way to the center of each area
-to move the robot, we need to move it in chunks, so we can use the split path function but giving it 2 points. It's current position, and its target in the center of the area. We make a new function called move_to_pos_in_chunks that uses move_to_pos. this way we can spin the sonar at every smol movement.



- after the update, scan the new grid of particles for clusters of particles (that are not part of the wall) where each particle in that cluster have weight > n.

([roughly] we can find clusters by looping through each particle in the grid, if particle.weight > n, then trigger a function that recursively calls for the adjacent particles, and whose stop condition is if the particle weight < n or if the particle is part of the wall.)  ACTUALLY we can do this with convolution kernel

- if the number of particles in a found cluster (within a certain area A B or C) is > x, we know it is probably a soda bottle. Therefore, move to the mean of the particles in that cluster. 

- move until the bump sensor detects a collision. If we have moved way past the average (y cm) and still havent detected a bump, then something fucked up and we need to go back to step 1.

- After a successful collision, move to the next area and repeat.

- If the bumper is triggered unexpectedly, on our way to area X, then we just assume the robot managed to find X, and we go to the next location. with this rule, we can make the robot go to the center of each area to start scanning, as oppossed to having to scan from outside hte area first

# a 2L coke bottle has diameter 11cm


####ok well that plan did not work

##new plan

 - go to center of a, b and c
 - do a scan (only regarding depths that are < n so we know they aren't bogus), each depth measurement should be compared against an expected measurement
 - the measurement with the biggest difference is the bottle
 - if it moves to the position and there was no hit, move and rotate a bit, and try again
 - if along the way it bumps, we know it hit so move on
